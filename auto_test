import requests
import json
import webbrowser
import time

### ðŸŽ¯ STEP 1: Define Your Spotify Credentials ###
CLIENT_ID = "your_spotify_client_id"
CLIENT_SECRET = "your_spotify_client_secret"
REDIRECT_URI = "your_redirect_uri"  # Must match the one registered in Spotify Developer

TOKEN_FILE = "spotify_tokens.json"  # File to store tokens persistently

# Spotify API URLs
SPOTIFY_AUTH_URL = "https://accounts.spotify.com/authorize"
SPOTIFY_TOKEN_URL = "https://accounts.spotify.com/api/token"
SPOTIFY_SEARCH_URL = "https://api.spotify.com/v1/search"
SPOTIFY_PLAYLISTS_URL = "https://api.spotify.com/v1/me/playlists"
SPOTIFY_ADD_TRACKS_URL = "https://api.spotify.com/v1/playlists/{playlist_id}/tracks"
SPOTIFY_CREATE_PLAYLIST_URL = "https://api.spotify.com/v1/users/{user_id}/playlists"

### ðŸŽ¯ STEP 2: Authenticate with Spotify ###
def get_access_token():
    """Retrieves or refreshes the Spotify access token."""
    try:
        # Check if the token file exists
        with open(TOKEN_FILE, "r") as f:
            tokens = json.load(f)
            access_token = tokens.get("access_token")
            refresh_token = tokens.get("refresh_token")
            expires_at = tokens.get("expires_at")

        # Refresh the token if it's expired
        if time.time() > expires_at:
            return refresh_access_token(refresh_token)

        return access_token

    except (FileNotFoundError, json.JSONDecodeError):
        return authorize_user()

def authorize_user():
    """Guides the user to log in to Spotify and get an access token."""
    auth_url = (
        f"{SPOTIFY_AUTH_URL}?client_id={CLIENT_ID}"
        f"&response_type=code&redirect_uri={REDIRECT_URI}"
        f"&scope=playlist-modify-public playlist-modify-private"
    )
    
    print(f"ðŸ”— Open this URL in your browser to log in: {auth_url}")
    webbrowser.open(auth_url)
    
    auth_code = input("ðŸ”‘ Enter the authorization code from the URL: ").strip()
    
    # Exchange auth code for an access token
    response = requests.post(SPOTIFY_TOKEN_URL, data={
        "grant_type": "authorization_code",
        "code": auth_code,
        "redirect_uri": REDIRECT_URI,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
    })

    if response.status_code == 200:
        tokens = response.json()
        tokens["expires_at"] = time.time() + tokens["expires_in"]
        
        with open(TOKEN_FILE, "w") as f:
            json.dump(tokens, f)

        return tokens["access_token"]
    else:
        raise Exception("Authorization failed! Please try again.")

def refresh_access_token(refresh_token):
    """Refreshes the Spotify access token."""
    response = requests.post(SPOTIFY_TOKEN_URL, data={
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
    })

    if response.status_code == 200:
        tokens = response.json()
        tokens["expires_at"] = time.time() + tokens.get("expires_in", 3600)

        with open(TOKEN_FILE, "w") as f:
            json.dump(tokens, f)

        return tokens["access_token"]
    else:
        raise Exception("Token refresh failed! Please reauthorize.")

### ðŸŽ¯ STEP 3: Generate Playlist Songs Using ChatGPT ###
def get_song_recommendations():
    """Asks ChatGPT for a song list based on a scenario."""
    prompt = input("ðŸŽµ Enter a mood, scenario, or purpose for your playlist: ")
    
    chatgpt_url = "https://api.openai.com/v1/chat/completions"
    headers = {"Authorization": "Bearer YOUR_OPENAI_API_KEY", "Content-Type": "application/json"}
    data = {
        "model": "gpt-4",
        "messages": [{"role": "user", "content": f"Generate a list of 10 songs for: {prompt}"}]
    }

    response = requests.post(chatgpt_url, headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"].split("\n")
    else:
        raise Exception("ChatGPT API call failed!")

### ðŸŽ¯ STEP 4: Create a Spotify Playlist ###
def create_playlist(user_id, access_token):
    """Creates a new playlist on the user's Spotify account."""
    playlist_name = "AI Curated Playlist"
    
    response = requests.post(
        SPOTIFY_CREATE_PLAYLIST_URL.format(user_id=user_id),
        headers={"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"},
        json={"name": playlist_name, "description": "Generated by ChatGPT", "public": False},
    )

    if response.status_code == 201:
        return response.json()["id"]
    else:
        raise Exception("Failed to create playlist!")

### ðŸŽ¯ STEP 5: Search for Songs and Add Them to the Playlist ###
def get_track_uri(song_name, access_token):
    """Searches for a song and returns its Spotify track URI."""
    response = requests.get(
        SPOTIFY_SEARCH_URL,
        headers={"Authorization": f"Bearer {access_token}"},
        params={"q": song_name, "type": "track", "limit": 1},
    )

    if response.status_code == 200 and response.json()["tracks"]["items"]:
        return response.json()["tracks"]["items"][0]["uri"]
    return None

def add_songs_to_playlist(playlist_id, song_uris, access_token):
    """Adds songs to the created playlist."""
    requests.post(
        SPOTIFY_ADD_TRACKS_URL.format(playlist_id=playlist_id),
        headers={"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"},
        json={"uris": song_uris},
    )

### ðŸŽ¯ STEP 6: Run the Full Script ###
def main():
    access_token = get_access_token()

    # Get the user's Spotify ID
    response = requests.get("https://api.spotify.com/v1/me", headers={"Authorization": f"Bearer {access_token}"})
    user_id = response.json()["id"]

    # Get song recommendations from ChatGPT
    song_list = get_song_recommendations()
    
    # Create a new Spotify playlist
    playlist_id = create_playlist(user_id, access_token)
    
    # Search for song URIs and add them to the playlist
    song_uris = [get_track_uri(song, access_token) for song in song_list if get_track_uri(song, access_token)]
    add_songs_to_playlist(playlist_id, song_uris, access_token)
    
    print(f"âœ… Playlist created! Open it here: https://open.spotify.com/playlist/{playlist_id}")

if __name__ == "__main__":
    main()