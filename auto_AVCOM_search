from playwright.sync_api import sync_playwright
import csv

SAMPLE_CSV = "sample_parts.csv"
RESULTS_CSV = "results.csv"

def run_audit():
    with sync_playwright() as p:
        # Use your real user data directory where Smart Card cert is trusted
        browser = p.chromium.launch_persistent_context(
            user_data_dir="/home/you/.config/google-chrome",  # adjust path
            headless=False,  # or True once tested
            args=["--ignore-certificate-errors"]
        )
        page = browser.new_page()
        page.goto("https://vendor-tool.example.com/login")

        # Assuming Smart Card prompt appears here and is auto‑handled by OS
        page.wait_for_load_state("networkidle")

        # Prepare results file
        with open(RESULTS_CSV, "w", newline="") as outfile:
            writer = csv.writer(outfile)
            writer.writerow(["part_number", "found", "notes"])

            # Iterate sample
            with open(SAMPLE_CSV) as infile:
                reader = csv.DictReader(infile)
                for row in reader:
                    pn = row["part_number"]
                    # Workflow: click Search
                    page.click("text=Search")
                    # Fill OEM P/N field
                    page.fill("input[name='oem_pn']", pn)
                    page.click("text=Refresh")
                    # Wait for either result table or popup
                    try:
                        page.wait_for_selector("table.results tbody tr", timeout=3000)
                        found = True
                        notes = ""
                    except:
                        # No row → check for popup
                        if page.is_visible("text=No Matches"):
                            found = False
                            notes = "No Matches popup"
                            page.click("text=OK")  # close popup
                        else:
                            found = False
                            notes = "Unknown state"
                    writer.writerow([pn, found, notes])
        browser.close()

if __name__ == "__main__":
    run_audit()