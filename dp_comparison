#!/usr/bin/env python3
"""
excel_compare_tracker_vs_prod.py

Revision:
- "In Both" column now contains the actual normalized value if present in both,
  otherwise left blank (NaN).
"""

from __future__ import annotations
import argparse, os, sys, re
from typing import Iterable, List, Set
import pandas as pd

# Regex for base code (e.g. 14-000 or 14-000B), ignoring dot-suffixes.
_BASE_PATTERN = re.compile(r"^\s*([0-9]{2}-[0-9]{3}[A-Z]?)", re.IGNORECASE)

def normalize(val: object) -> str | None:
    if val is None:
        return None
    s = str(val).strip()
    if not s:
        return None
    pre_dot = s.split(".", 1)[0].strip()
    m = _BASE_PATTERN.match(pre_dot)
    if not m:
        return None
    return m.group(1).upper()

def normalize_series(values: Iterable[object]) -> List[str]:
    out: List[str] = []
    for v in values:
        nv = normalize(v)
        if nv is not None:
            out.append(nv)
    return out

def main():
    parser = argparse.ArgumentParser(description="Compare 'from Tracker' vs 'from Prod Report' columns in Excel.")
    parser.add_argument("--input", required=True, help="Path to input .xlsx/.xlsm")
    parser.add_argument("--sheet", default=None, help="Worksheet name (default: first sheet)")
    parser.add_argument("--output", default=None, help="Output path (default: add _with_comparison before extension)")
    args = parser.parse_args()

    in_path, sheet = args.input, args.sheet
    if not os.path.exists(in_path):
        sys.exit(f"❌ Input file not found: {in_path}")

    if args.output:
        out_path = args.output
    else:
        root, ext = os.path.splitext(in_path)
        out_path = f"{root}_with_comparison{ext if ext else '.xlsx'}"

    try:
        df = pd.read_excel(in_path, sheet_name=sheet, dtype=object)
    except Exception as e:
        sys.exit(f"❌ Failed to read Excel: {e}")

    required_cols = ["from Tracker", "from Prod Report"]
    for col in required_cols:
        if col not in df.columns:
            sys.exit(f"❌ Missing required column '{col}'. Found columns: {list(df.columns)}")

    tracker_norm_list = normalize_series(df["from Tracker"])
    prod_norm_list    = normalize_series(df["from Prod Report"])
    tracker_set: Set[str] = set(tracker_norm_list)
    prod_set: Set[str]    = set(prod_norm_list)

    # Instead of True/False, put the normalized value if present in both
    def in_both_value(x: object) -> str | pd._libs.missing.NAType:
        nx = normalize(x)
        if nx is not None and nx in prod_set:
            return nx
        return pd.NA

    df["In Both"] = df["from Tracker"].apply(in_both_value)

    # Difference list
    only_in_prod = sorted(prod_set - tracker_set)

    target_col = "In Prod Report but not in Tracker"
    n_rows, n_extra = len(df), max(0, len(only_in_prod) - len(df))
    if n_extra > 0:
        df = pd.concat([df, pd.DataFrame(index=range(n_extra))], ignore_index=True)
    df[target_col] = pd.NA
    if only_in_prod:
        df.loc[:len(only_in_prod)-1, target_col] = only_in_prod

    try:
        with pd.ExcelWriter(out_path, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name=(sheet if sheet else "Sheet1"))
        print(f"✅ Wrote comparison to: {out_path}")
    except Exception as e:
        sys.exit(f"❌ Failed to write Excel: {e}")

if __name__ == "__main__":
    main()